// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package aid

import (
	"fmt"
	"io"
	"strconv"

	"github.com/autoai-org/aid/ent/generated"
)

type Connection struct {
	Count    int       `json:"Count"`
	PageInfo *PageInfo `json:"pageInfo"`
	Edges    []*Edge   `json:"edges"`
}

type Edge struct {
	Node   generated.Noder `json:"node"`
	Cursor string          `json:"cursor"`
}

type ImageConnection struct {
	TotalCount int          `json:"totalCount"`
	PageInfo   *PageInfo    `json:"pageInfo"`
	Edges      []*ImageEdge `json:"edges"`
}

type ImageEdge struct {
	Node   *generated.Image `json:"node"`
	Cursor string           `json:"cursor"`
}

type ImageOrder struct {
	Direction OrderDirection   `json:"direction"`
	Field     *ImageOrderField `json:"field"`
}

type PageInfo struct {
	HasNextPage bool    `json:"hasNextPage"`
	HasPrevPage bool    `json:"hasPrevPage"`
	StartCursor *string `json:"startCursor"`
	EndCursor   *string `json:"endCursor"`
}

type ImageOrderField string

const (
	ImageOrderFieldCreatedAt ImageOrderField = "CREATED_AT"
	ImageOrderFieldTitle     ImageOrderField = "TITLE"
)

var AllImageOrderField = []ImageOrderField{
	ImageOrderFieldCreatedAt,
	ImageOrderFieldTitle,
}

func (e ImageOrderField) IsValid() bool {
	switch e {
	case ImageOrderFieldCreatedAt, ImageOrderFieldTitle:
		return true
	}
	return false
}

func (e ImageOrderField) String() string {
	return string(e)
}

func (e *ImageOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ImageOrderField(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ImageOrderField", str)
	}
	return nil
}

func (e ImageOrderField) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type OrderDirection string

const (
	OrderDirectionAsc  OrderDirection = "ASC"
	OrderDirectionDesc OrderDirection = "DESC"
)

var AllOrderDirection = []OrderDirection{
	OrderDirectionAsc,
	OrderDirectionDesc,
}

func (e OrderDirection) IsValid() bool {
	switch e {
	case OrderDirectionAsc, OrderDirectionDesc:
		return true
	}
	return false
}

func (e OrderDirection) String() string {
	return string(e)
}

func (e *OrderDirection) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OrderDirection(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid OrderDirection", str)
	}
	return nil
}

func (e OrderDirection) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
