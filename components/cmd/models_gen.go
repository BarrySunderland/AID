// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package aid

import (
	"fmt"
	"io"
	"strconv"
)

type Node interface {
	IsNode()
}

type Connection struct {
	Count    int       `json:"Count"`
	PageInfo *PageInfo `json:"pageInfo"`
	Edges    []*Edge   `json:"edges"`
}

type Edge struct {
	Node   Node   `json:"node"`
	Cursor string `json:"cursor"`
}

type Image struct {
	ID int `json:"id"`
}

func (Image) IsNode() {}

type PageInfo struct {
	HasNextPage bool    `json:"hasNextPage"`
	HasPrevPage bool    `json:"hasPrevPage"`
	StartCursor *string `json:"startCursor"`
	EndCursor   *string `json:"endCursor"`
}

type Status string

const (
	StatusInProgress Status = "IN_PROGRESS"
	StatusCompleted  Status = "COMPLETED"
)

var AllStatus = []Status{
	StatusInProgress,
	StatusCompleted,
}

func (e Status) IsValid() bool {
	switch e {
	case StatusInProgress, StatusCompleted:
		return true
	}
	return false
}

func (e Status) String() string {
	return string(e)
}

func (e *Status) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Status(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Status", str)
	}
	return nil
}

func (e Status) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
